<?php

include_once('old_community.features.inc');

/**
 * Implementation of hook_perm()
 */
function old_community_perm() {
  return array('manage all coordinators', 'edit all groups', 'invite to all groups', 'broadcast to all groups', 'promote to my groups', 'remove from group');
}

/**
 * Implementation of hook_menu().
 */
function old_community_menu() {
  $items['community/%node/promote/%user/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('old_profile_promote_member_confirm', 1, 3, 4),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(1),
    'title' => 'Promote to Coordinator',
    'file' => 'old_community.pages.inc',
  );
  $items['community/%node/demote/%user/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('old_profile_demote_member_confirm', 1, 3, 4),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(1),
    'title' => 'Demote Coordinator',
    'file' => 'old_community.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_alter()
 *
 * need to use instead of hook_FORM_ID_alter() because need for other modules to alter first.
 *
 */
function old_community_form_alter(&$form, &$form_state, $form_id) {
  $form = $form;
}
/**
 * Implementation of hook_nodeapi().
 */
function old_community_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type=='memblog') {
    switch ($op) {
      case 'insert':
        global $user;
        foreach ($user->og_groups as &$group) {
          db_query('INSERT INTO {og_access_post} (nid, og_public) VALUES (%d, 1)', $node->nid);
          db_query('INSERT INTO {og_ancestry} (nid, group_nid) VALUES (%d, %d)', $node->nid, $group['nid']);
        }
        unset($group);
  	  break;
    }
  }
}
/**
 * Alter the final export array just prior to the rendering of defaults. Allows
 * modules a final say in altering what component objects are exported.
 *
 * @param array &$export
 *   By reference. An array of all components to be exported with a given
 *   feature.
 * @param array $module_name
 *   The name of the feature module to be generated.
 */
function old_community_features_export_alter(&$export, $module_name) {
  // Example: do not allow the page content type to be exported, ever.
  if (!empty($export['node']['page'])) {
    unset($export['node']['page']);
  }
}

/**
* Implements hook_uuid_node_features_export_render_alter()
*/
function old_community_uuid_node_features_export_render_alter(&$export, $node, $module) {
  // don't allow uuid_features to export node properties that can change on deployment
  unset($export->changed);
  unset($export->created);
  unset($export->revision_uuid);
  unset($export->last_comment_timestamp);
  unset($export->revision_timestamp);
  unset($export->data);
  unset($export->picture);
  unset($export->old_status);
  unset($export->date);
  // webform stores nid
  if(isset($export->webform)) {
    unset($export->webform['nid']);
    foreach($export->webform['components'] as $key => $wf) {
      unset($export->webform['components'][$key]['nid']);
    }
  }
}