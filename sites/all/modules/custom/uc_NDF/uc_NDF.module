<?php
// $Id: uc_NDF.module,v 1.2 2009/02/07 20:23:28 longwave Exp $

/**
 * @file
 * Process payments using NDF.
 *
 * Code by David Long <dave@longwaveconsulting.com>
 * Rewritten by Mike Pirog <mpirog@pirotekdc.com>
 *
 * Development sponsored by:
 * * CityTech Corp - http://www.citytechcorp.com/
 * * NDF - http://www.NDF.com/
 * * Gotham City Drupal - http://gothamcitydrupal.com/
 *
 * For API reference see https://NDF.com/manuals/NDFAPIUserGuideXML.pdf
 */

// Currently no test url
//define('UC_NDF_TEST_GATEWAY_URL', 'https://webtest.comstarinteractive.com/chargeanywheremanager/PaymentForm/PaymentForm.asp');
define('UC_NDF_LIVE_GATEWAY_URL', 'https://www.comstarinteractive.com/ChargeAnywhereManager/PaymentForm/PaymentForm.asp');

if (!function_exists('hex_hmac_md5')) {
  require_once('hmacmd5_inc.php');
}

/**
 * Implementation of hook_payment_gateway().
 */
function uc_ndf_payment_gateway() {
  $gateways[] = array(
    'id' => 'ndf',
    'title' => t('NDF'),
    'description' => t('Process credit card payments using NDF.'),
    'settings' => 'uc_ndf_settings_form',
    'credit' => 'uc_ndf_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

/**
 * Payment gateway settings form.
 */
function uc_ndf_settings_form() {
  $form['uc_ndf_merchantid'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Merchant ID'),
  	'#default_value' => variable_get('uc_ndf_merchantid', ''),
  );
  $form['uc_ndf_terminalid'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Terminal ID'),
  	'#default_value' => variable_get('uc_ndf_terminalid', ''),
  );
  $form['uc_ndf_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#default_value' => variable_get('uc_ndf_secret', ''),
  );
 $form['uc_ndf_wps_server'] = array(
    '#type' => 'select',
    '#title' => t('NDF server'),
    '#description' => t('Please provide the Server Type for Next Day Funding'),
  	'#attributes' => array('style' => 'width:70px'),
    '#options' => array(
  		'Live' => ('Live'),
    	//'Test' => ('Test'),
    ),
 	'#default_value' => variable_get('uc_ndf_wps_server', 'Live'),
  );
  $form['uc_ndf_live_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Live URL'),
	'#size'=>100,
    '#default_value' => variable_get('uc_ndf_live_url', UC_NDF_LIVE_GATEWAY_URL),
  );
  return $form;
}

/**
 * Callback for processing a credit card transaction.
 */
function uc_ndf_charge($order_id, $amount, $data) {
  global $user;

  // Load the order.
  $order = uc_order_load($order_id);

  // Build a description of the order for logging.
  $description = array();
  foreach ((array) $order->products as $product) {
    $description[] = $product->qty .'x '. $product->model;
  }

  // Build the POST data for the transaction.
  $submit_data = array(
    // Merchant Information
    'MerchantId' => variable_get('uc_ndf_merchantid', ''),
    'TerminalId' => variable_get('uc_ndf_terminalid', ''),
    'Secret' => variable_get('uc_ndf_secret', ''),

    // Transaction Information
    'Amount' => $amount,
    'CardNumber' => $order->payment_details['cc_number'],
    'ExpMonth' => str_pad($order->payment_details['cc_exp_month'], 2, '0', STR_PAD_LEFT),
    'ExpYear' => substr($order->payment_details['cc_exp_year'], -2),

     // Request Information
  	'Mode' => 2,
  );

  // Add card CSC/CVV value, if enabled.
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $submit_data['CardVerificationValue'] = $order->payment_details['cc_cvv'];
  }

  /*
  If the live URL entered is selected the request will got the Live site;
  otherwise the request will be sever from the test URL given.
  */
  // Determine the correct URL based on the transaction mode.
  if (variable_get('uc_ndf_wps_server', 'Live') == 'Test') {
    //$post_url = variable_get('uc_ndf_test_url', UC_NDF_TEST_GATEWAY_URL);
  }
  else {
    $post_url = variable_get('uc_ndf_live_url', UC_NDF_LIVE_GATEWAY_URL);
  }

  // Translate the data array into a string we can POST.
  $post_fields = array();
  foreach ($submit_data as $key => $value) {
    $post_fields[] = $key .'='. urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $post_fields));
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('uc_NDF', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return array('success' => FALSE);
  }
  curl_close($ch);

  // parse result
  $exploded = explode('&', $result);
  foreach ($exploded as &$value) {
    // PHP 5.3
    //$response[strstr($value, '=', true)] = substr(strstr($value, '='), 1);
    // PHP 5.2
    $response[substr($value, 0, strpos($value, '='))] = substr(strstr($value, '='), 1);
  }

  if ($response['ResponseCode'] != '000') {
    // Fail the charge with the reason text in the decline message.
    $result = array(
      'success' => FALSE,
      'message' => t('Credit card payment declined: @message', array('@message' => 'RESPONSE CODE: ' . $response['ResponseCode'] . ': ' . $response['ResponseText'])),
      'uid' => $user->uid,
    );
  }
  else {
    // Build a message for display and comments in the payments table.
    $message = t('Type: @type<br />ID: @id', array('@type' => $data['txn_type'], '@id' => $response['ReferenceNumber']));
    $result = array(
      'success' => TRUE,
      'comment' => $message,
      'message' => $message,
      'data' => array('module' => 'uc_NDF', 'txn_type' => $data['txn_type'], 'txn_id' => $response['ReferenceNumber']),
      'uid' => $user->uid,
    );

    // If this was an authorization only transaction...
    if ($data['txn_type'] == UC_CREDIT_AUTH_ONLY) {
      // Log the authorization to the order.
      uc_credit_log_authorization($order->order_id, $response['ReferenceNumber'], $amount);
    }
    elseif ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      uc_credit_log_prior_auth_capture($order->order_id, $data['auth_id']);
    }
  }

  // Don't log this as a payment money wasn't actually captured.
  if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY))) {
    $result['log_payment'] = FALSE;
  }

  // Build an admin order comment.
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );
  $comment = t('Type: @type<br />Status: @status<br />Message: @message<br />Amount: @amount<br />AVS response: @avs',
      array(
      	'@type' => $data['txn_type'],
      	'@status' => $response['ResponseCode'],
      	'@message' => $response['ResponseText'],
      	'@amount' => $amount,
      	'@avs' => $response['AVSResponse']
       )
  );

  // Add the CVV response if enabled.
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $comment .= '<br />'. t('CVV match: @cvv', array('@cvv' =>$result['CVVResponse']));
  }

  // Save the comment to the order.
  uc_order_comment_save($order->order_id, $user->uid, $comment, 'admin');

  return $result;
}
