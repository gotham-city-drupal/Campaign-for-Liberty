<?php
// $Id: uc_donate.module,v 1.2.4.3 2009/01/30 00:12:05 greenskin Exp $

/**
 * @uc_donate.module
 * Provides a page with donation products.
 *
 * This module provides a page listing donation products either by
 * group or individually. This supplied page also allows the user to set
 * various amounts for differing donation products and add them to the cart
 * all at once.
 *
 * The ability to have a featured donation product is also available if the
 * module Node Queue is installed. This featured donation product can be added
 * to the donate page and/or as a pane during checkout. This pane only shows if
 * no donations exist in the cart.
 *
 * Written by greenSkin.
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_help().
 */
function uc_donate_help($section) {
  switch ($section) {
    case 'admin/help#uc_donate':
      return '<p>'. t('Add donation products to a single page where users can add amounts for several different donations at once and then add them all to the cart.') .'</p>';
    case 'admin/store/settings/donate/manage/queue':
      return '<p>'. t('Queues which are set up to allow donation type nodes will be selectable. Only nodes that are a donation type will be displayed out of the node queue.') .'</p>';
  }
}

/**
 * Implementation of hook_theme().
 */
function uc_donate_theme() {
  return array(
    'uc_donate_manage' => array(
      'arguments' => array('form' => NULL)
    ),
    'uc_donate_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'uc_donate_donation_item' => array(
      'arguments' => array('form' => NULL)
    ),
    'uc_donate_group' => array(
      'arguments' => array('form' => NULL)
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function uc_donate_perm() {
  return array('administer donate', 'access donate page');
}

/**
 * Implementation of hook_menu().
 */
function uc_donate_menu() {
  $items['donate'] = array(
    'title' => 'Donate',
    'access arguments' => array('access donate page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_donate_form'),
    'file' => 'uc_donate.page.inc'
  );
  $items['admin/store/settings/donate'] = array(
    'title' => 'Donate Page',
    'access arguments' => array('administer donate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_donate_settings'),
    'file' => 'uc_donate.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/store/settings/donate/general'] = array(
    'title' => 'General',
    'description' => 'Set general settings for the donate page.',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/store/settings/donate/manage'] = array(
    'title' => 'Manage Donate Products',
    'description' => 'Add, remove, and arrange donation products to the donate page.',
    'access arguments' => array('administer donate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_donate_manage'),
    'file' => 'uc_donate.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/store/settings/donate/manage/overview'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/store/settings/donate/manage/donation'] = array(
    'title' => 'Add Donation',
    'access arguments' => array('administer donate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_donate_donation'),
    'file' => 'uc_donate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5
  );
  $items['admin/store/settings/donate/manage/group'] = array(
    'title' => 'Add Group',
    'access arguments' => array('administer donate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_donate_group_form'),
    'file' => 'uc_donate.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5
  );
  if (module_exists('nodequeue')) {
    $items['admin/store/settings/donate/manage/queue'] = array(
      'title' => 'Add Node Queue',
      'access arguments' => array('administer donate'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uc_donate_add_queue'),
      'file' => 'uc_donate.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => -5
    );
  }
  $items['admin/store/settings/donate/manage/delete/%'] = array(
    'title' => 'Delete item',
    'access arguments' => array('administer donate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_donate_delete', 6),
    'file' => 'uc_donate.admin.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function uc_donate_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form' && module_exists('nodequeue')) {
    $form['#validate'][] = 'uc_donate_cart_checkout_form_validate';
  }
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_checkout_pane().
 */
function uc_donate_checkout_pane() {
  if (module_exists('nodequeue')) {
    $panes[] = array(
      'id' => 'donate',
      'title' => variable_get('uc_donate_featured_title', t('Featured Donation')),
      'desc' => t('Display the featured donation project if no donations are added to cart.'),
      'callback' => 'uc_checkout_pane_donate',
      'weight' => 1,
      'collapsible' => FALSE
    );
    return $panes;
  }
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_checkout_pane_donate($op, &$arg1, $arg2) {
  switch ($op) {
    case 'view':
      $cid = uc_cart_get_id();
      $donations = FALSE;
      $items = uc_cart_get_contents();
      foreach ($items as $item) {
        if ($item->module == 'uc_donation') {
          $donations = TRUE;
        }
      }
      if ($donations == FALSE) {
        $qid = variable_get('uc_donate_featured_queue', 0);
        if ($qid > 0) {
          $description = variable_get('uc_donate_featured_description', '');
          $count = variable_get('uc_donate_featured_count', 1);
          $contents = uc_donate_featured_pane();
          drupal_add_js(drupal_get_path('module', 'uc_donate').'/jquery.highlightFade.js');
          drupal_add_js(drupal_get_path('module', 'uc_donate').'/uc_donate_pane.js');
          return array('description' => $description, 'contents' => $contents, 'next-button' => FALSE);
        }
      }
    case 'settings':
      $form['uc_donate_featured_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('This is the checkout panes title as well as the label for the line item.'),
        '#default_value' => variable_get('uc_donate_featured_title', t('Featured Donation'))
      );
      $form['uc_donate_featured_description'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#description' => t('Text to be displayed in the donate pane.'),
        '#default_value' => variable_get('uc_donate_featured_description', '')
      );
      $form['uc_donate_featured_queue'] = array(
        '#type' => 'select',
        '#title' => t('Featured Donation Queue'),
        '#options' => uc_donate_queues(FALSE)
      );
      return $form;
  }
}

function uc_donate_cart_checkout_form_validate($form_id, $form_values) {
  if (!empty($form_values['panes']['donate']) && is_array($form_values['panes']['donate'])) {
    $order_id = $_SESSION['cart_order'];
    $order = uc_order_load($order_id);
    foreach ($form_values['panes']['donate'] as $k => $amount) {
      if ($amount > 0) {
        $cid = uc_cart_get_id();
        $nid = str_replace('uc_donate_featured_amount', '', $k);
        $node = node_load($nid);
        $form = drupal_retrieve_form('uc_donation_add_to_cart_form_'.$nid, $node);
        $form_values = array();
        foreach ($form as $key => $value) {
          if (!preg_match('/^#/', $key)) {
            $form_values[$key] = isset($value['#value']) ? $value['#value'] : $value['#default_value'];
          }
        }
        $node->data = module_invoke_all('add_to_cart_data', $form_values);
        $node->data['amount'] = $amount;
        $node->price = $amount;
        $node->qty = 1;
        db_query("INSERT INTO {uc_cart_products} (cart_id, nid, qty, changed, data) VALUES ('%s', %d, %d, %d, '%s')", $cid, $node->nid, $node->qty, time(), serialize($node->data));
        uc_order_product_save($order_id, $node);
      }
    }
  }
}

/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

function uc_donate_load() {
  $cache_id = 'uc_donate:items';
  $cache = cache_get($cache_id, 'cache');
  if ($cache && isset($cache->data)) {
    $tree = $cache->data;
  }
  else {
    $result = db_query("SELECT * FROM {uc_donate} WHERE pid = %d ORDER BY weight", 0);
    $tree = _uc_donate_load($result);
    cache_set($cache_id, $tree, 'cache');
  }
  return $tree;
}

function _uc_donate_load($result, $tree = array()) {
  while ($item = db_fetch_array($result)) {
    $tree[] = $item;
    $tree = _uc_donate_load(db_query("SELECT * FROM {uc_donate} WHERE pid = %d ORDER BY weight", $item['donate_id']), $tree);
  }
  return $tree;
}

function uc_donate_queues($limit = TRUE) {
  $options = array();
  $qids = nodequeue_get_qids('donation');
  foreach ($qids as $qid) {
    if ($limit) {
      $check = db_result(db_query("SELECT nid FROM {uc_donate} WHERE nid = %d AND type = '%s'", $qid->qid, 'queue'));
    }
    if (!$check) {
      $queue = nodequeue_load($qid->qid);
      $options[$queue->qid] = $queue->title;
    }
  }
  
  if (empty($options)) {
    $options = array('-- None --');
  }
  return $options;
}

function uc_donate_featured_pane() {
  $queue = nodequeue_load(variable_get('uc_donate_featured_queue', 0));
  $items = array();
  $result = db_query("SELECT nid FROM {nodequeue_nodes} WHERE qid = %d ORDER BY timestamp", $queue->qid);
  while ($data = db_fetch_object($result)) {
    $node = node_load($data->nid);
    if ($node->type == 'donation') {
      $image = isset($node->field_image_cache[0]) ? theme('imagecache', 'product_list', $node->field_image_cache[0]['filepath'], $node->field_image_cache[0]['alt'], $node->field_image_cache[0]['title']) : '';
      $items['uc_donate_featured_image'.$node->nid] = array(
        '#value' => '<div class="gift_item"><div class="gift_image">'.$image.'</div>'
      );
      $items['description'] = array(
        '#theme' => 'uc_donate_featured_desc'
      );
      $items['description']['uc_donate_featured_title'.$node->nid] = array(
        '#value' => '<h4>'.$node->title.'</h4>'
      );
      $items['description']['uc_donate_featured_body'.$node->nid] = array(
        '#value' => '<div class="body">'.$node->field_excerpt[0]['value'].'</div>',
      );
      $items['uc_donate_featured_amount'.$node->nid] = array(
        '#type' => 'textfield',
        '#title' => t('Amount'),
        '#default_value' => '0.00',
        '#size' => 10,
        '#prefix' => '<div class="gift_form">',
        '#suffix' => '</div></div>',
        '#attributes' => array('class' => 'donate-amount')
      );
    }
  }
  
  return $items;
}

/*******************************************************************************
 * Theme Functions
 ******************************************************************************/

function theme_uc_donate_featured_desc($form) {
  // dprint_r($form);
  $output = '<div class="gift_description">'.drupal_render($form).'</div>';
  return $output;
}