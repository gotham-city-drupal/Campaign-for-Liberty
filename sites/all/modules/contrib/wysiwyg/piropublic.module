<?php

include_once('piropublic.features.inc');


/**
 * Implementation of hook_init()
 */
function piropublic_init() {
  if (variable_get('theme_default', 'garland')=='liberty'){
    drupal_add_css(drupal_get_path('module', 'piropublic') . '/css/header_menu.css');
    drupal_add_css(drupal_get_path('module', 'piropublic') . '/css/featured_block.css');
  }
}

/**
* Implements hook_theme().
*/
function piropublic_theme() {
  return array(
    // need to use custom template to fix link module target=blank fail
  	'views_view_fields__legislative_efforts' => array(
      'template' => 'views-view-fields--legislative-efforts',
      'original hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'piropublic') . '/templates/',
   	  'preprocess functions' => array(
      	'template_preprocess',
      	'template_preprocess_views_view_fields',
        'piropublic_preprocess_views_view_fields__legislative_efforts',
      ),
      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
    ),
  );
}

/**
 * Implements hook_preprocess()
 */
function piropublic_preprocess_views_view_fields__legislative_efforts(&$variables) {
  // need to use custom template to fix link module target=blank fail
  if (array_key_exists('target', $target = unserialize($variables['row']->node_data_field_legislative_field_featured_block_link_attributes))) {
    $variables['fields']['field_feat_image_fid']->content = l($variables['fields']['field_feat_image_fid']->content, $variables['fields']['field_featured_block_link_url']->content, array('attributes' => array('target' => $target['target']), 'html' => 'true'));
  }
  else {
    $variables['fields']['field_feat_image_fid']->content = l($variables['fields']['field_feat_image_fid']->content, $variables['fields']['field_featured_block_link_url']->content, array('html' => 'true'));
  }
}

/**
 * Implementation of hook_FORM_ID_alter()
 *
 * removes unused config from site information form.
 *
 */
function piropublic_form_system_site_information_settings_alter(&$form, &$form_state) {
  if (variable_get('theme_default', 'garland')=='liberty'){
    unset($form['site_mission']);
    unset($form['site_footer']);
    unset($form['site_slogan']);
  }
}

/**
 * Implementation of hook_form_alter()
 *
 * need to use instead of hook_FORM_ID_alter() because need for other modules to alter first.
 *
 */
function piropublic_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'featured_blocks_node_form':
      if (!module_exists('piropublic_events')) {
        $form['field_events']['#description'] = '<small class="red">' . t('piropublic_events module required for this option') . '</small>';
        $form['#after_build'][] = '_piropublic_after_build';
      }
      if (!module_exists('piropublic_store')) {
        $form['field_store']['#description'] = '<small class="red">' . t('piropublic_store module required for this option') . '</small>';
        $form['#after_build'][] = '_piropublic_after_build';
      }
    break;
  }

}

/**
* Custom after_build callback handler.
*/
function _piropublic_after_build($form, &$form_state) {
  switch ($form['form_id']['#value']) {
    case 'featured_blocks_node_form':
      if (!module_exists('piropublic_events')) {
        _piropublic_fix_disabled($form['group_promote']['field_events']);
      }
      if (!module_exists('piropublic_store')) {
        _piropublic_fix_disabled($form['group_promote']['field_store']);
      }
    break;
  }
  return $form;
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function _piropublic_fix_disabled(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      _piropublic_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}


/**
* Implements hook_uuid_node_features_export_render_alter()
*/
function piropublic_uuid_node_features_export_render_alter(&$export, $node, $module) {
  // don't allow uuid_features to export node properties that can change on deployment
  unset($export->changed);
  unset($export->created);
  unset($export->revision_uuid);
  unset($export->last_comment_timestamp);
  unset($export->revision_timestamp);
  unset($export->data);
  unset($export->picture);
  unset($export->old_status);
  unset($export->date);
  // webform stores nid
  if(isset($export->webform)) {
    unset($export->webform['nid']);
    foreach($export->webform['components'] as $key => $wf) {
      unset($export->webform['components'][$key]['nid']);
    }
  }
}