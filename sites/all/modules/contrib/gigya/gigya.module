<?php
// $Id: gigya.module,v 1.16 2011/01/24 08:53:39 gambaweb Exp $
/**
 * @file
 * This module provides a link to Gigya profiles from a user's Drupal account.
 *
 * Development of this module is sponsered by Gigya, Inc.
 */

/**
 * Constants defined for various Gigya settings.
 */
define('GIGYA_ALREADY_DRUPAL_USER', 'already_drupal_user');
define('ONLY_SOCIALIZE_USER', 'only_socialize_user');
define('GIGYA_ENABLE_FACEBOOK_POPULATION', 'gigya_enable_facebook_population');
define('GIGYA_POPULATE_NON_REG_PROFILE_FIELDS', 'gigya_populate_non_reg_profile_fields');
define('GIGYA_DEFAULT_ICONSIZE', 30);
define('GIGYA_DEFAULT_LOGINUI_WIDTH', '120');
define('GIGYA_DEFAULT_LOGINUI_HEIGHT', '110');
define('GIGYA_DEFAULT_LOGINUI_COLOR_BACKGROUND', '#ffffff');
define('GIGYA_DEFAULT_LOGINUI_COLOR_FRAME', '#DFDFDF');
define('GIGYA_DEFAULT_LOGINUI_COLOR_TEXT', '#3A3A3A');
define('GIGYA_DEFAULT_LOGINUI_COLOR_LINK', '#0066CC');
define('GIGYA_DEFAULT_LOGINUI_COLOR_NAVIGATION_ARROW', '#79BCFD');
define('GIGYA_DEFAULT_LOGINUI_COLOR_CAPTION_BACKGROUND', '#4692DE');
define('GIGYA_DEFAULT_LOGINUI_COLOR_CAPTION_TEXT', '#FFFFFF');
define('GIGYA_DEFAULT_LOGINUI_COLOR_BUTTON_TEXT', '#3A3A3A');
define('GIGYA_DEFAULT_LOGINUI_COLOR_BACKGROUND_TRANSPARENT', TRUE);
define('GIGYA_DEFAULT_LOGINUI_CONTAINERID', 'divGigyaLogin');
define('GIGYA_DEFAULT_LOGINUI_USEHTML', TRUE);
define('GIGYA_DEFAULT_FRIENDSUI_WIDTH', '360');
define('GIGYA_DEFAULT_FRIENDSUI_HEIGHT', '400');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_BACKGROUND', '#ffffff');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_FRAME', '#DFDFDF');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_TEXT', '#3A3A3A');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_LINK', '#0066CC');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_NAVIGATION_ARROW', '#79BCFD');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_CAPTION_BACKGROUND', '#4692DE');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_CAPTION_TEXT', '#FFFFFF');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_BUTTON_TEXT', '#3A3A3A');
define('GIGYA_DEFAULT_FRIENDSUI_COLOR_BACKGROUND_TRANSPARENT', TRUE);
define('GIGYA_DEFAULT_FRIENDSUI_CONTAINERID', 'friends');
define('GIGYA_DEFAULT_FRIENDSUI_SHOWCAPTION', FALSE);
define('GIGYA_DEFAULT_FRIENDSUI_CAPTIONTEXT', 'Select Friends');
define('GIGYA_DEFAULT_FRIENDSUI_LINKTITLE', 'View Site');
define('GIGYA_DEFAULT_CONNECTUI_WIDTH', '175');
define('GIGYA_DEFAULT_CONNECTUI_HEIGHT', '85');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_BACKGROUND', '#ffffff');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_FRAME', '#FFFFFF');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_TEXT', '#3A3A3A');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_LINK', '#0066CC');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_NAVIGATION_ARROW', '#79BCFD');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_CAPTION_BACKGROUND', '#4692DE');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_CAPTION_TEXT', '#FFFFFF');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_BUTTON_TEXT', '#3A3A3A');
define('GIGYA_DEFAULT_CONNECTUI_COLOR_BACKGROUND_TRANSPARENT', TRUE);
define('GIGYA_DEFAULT_CONNECTUI_CONTAINERID', 'divConnect');
define('GIGYA_DEFAULT_CONNECTUI_SHOWCAPTION', FALSE);
define('GIGYA_DEFAULT_CONNECTUI_CAPTIONTEXT', 'Select social networks');
define('GIGYA_DEFAULT_CONNECTUI_USEHTML', TRUE);
define('GIGYA_DEFAULT_SHARE_SUBJECT', 'A site recommendation for you');
define('GIGYA_DEFAULT_SHARE_MESSAGE', 'I wanted to recommend this site <br/>to you. I enjoy it and think you will like it.');
define('GIGYA_DEFAULT_SHARE_LINK_TITLE', 'Share with friends');
define('GIGYA_DEFAULT_SHARE_UI_LINK_TITLE', 'Share UI title');
define('GIGYA_DEFAULT_SHARE_UI_SUBJECT', 'Share UI: A site recommendation for you');
define('GIGYA_DEFAULT_SHARE_UI_MESSAGE', 'Share UI: I wanted to recommend this site <br/>to you. I enjoy it and think you will like it.');
define('GIGYA_DEFAULT_SHARE_UI_SHOW_EMAIL_BUTTON', TRUE);
define('GIGYA_DEFAULT_SHARE_UI_SHOW_MORE_BUTTON', TRUE);
define('GIGYA_DEFAULT_LOGINUI_FBCONNECT', TRUE);

/**
 * Implementation of hook_help().
 */
function gigya_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/gigya':
      return '<p>'. t('Server-wide setup of the Gigya module.') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function gigya_menu() {
  $items['admin/settings/gigya'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Gigya Socialize Settings'),
    'access arguments' => array('administer gigya'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_admin_form'),
    'description' => t('Gigya Configuration.'),
    'file' => 'gigya.admin.inc',
  );
  $items['user/%user/friends'] = array(
    'title' => 'My Friends',
    'page callback' => 'gigya_get_friends',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(1, 'user'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'gigya.pages.inc',
  );
  $items['user/%user/gigyainfo'] = array(
    'title' => 'Gigya User Info (debug)',
    'page callback' => 'gigya_get_user',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(1, 'user'),
    'access callback' => 'gigya_menu_access_user_debug',
    'access arguments' => array(),
    'file' => 'gigya.pages.inc',
  );
  $items['user/%user/edit/gigya'] = array(
    'title' => 'Social Networks',
    'page callback' => 'gigya_connect',
    'page arguments' => array(1, 'user'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'load arguments' => array('%map', '%index'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'gigya.pages.inc',
  );
  $items['socialize-register'] = array(
    'type' => MENU_CALLBACK,
    'title' => t('Create or Link Account'),
    'access arguments' => array('access content'),
    'page callback' => 'gigya_register',
    'description' => t('Gigya Registration.'),
    'file' => 'gigya.pages.inc',
  );
  $items['socialize-login'] = array(
    'page callback' => 'gigya_login_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'gigya.pages.inc',
  );
  $items['socialize-logout'] = array(
    'page callback' => 'gigya_logout_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'gigya.pages.inc',
  );
  $items['socialize-ajax/%'] = array(
    'page callback' => 'gigya_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'gigya.pages.inc',
    'page arguments' => array(1),
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function gigya_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      array(
        'info' => t('Gigya login'),
        'cache' => BLOCK_NO_CACHE,
      ),
      array(
        'info' => t('Gigya connectUI'),
        'cache' => BLOCK_NO_CACHE,
      ),
    );
  }
  elseif ($op == 'view') {
    if ($delta == 0) {
      return array(
        'subject' => t('Log in using a social network'),
        'content' => theme('gigya_login_block', NULL, TRUE),
      );
    }
    else {
      return array(
        'subject' => t('Social network connections'),
        'content' => theme('gigya_connect_display'),
      );
    }
  }
}

/**
 * Access callback for user/%user/gigyainfo menu item.
 *
 * Checks if the user is on their own account page and if so set the access
 * callback to check if they have devel information access.
 */
function gigya_menu_access_user_debug() {
  global $user;
  if (arg(1) == $user->uid) {
    return user_access('access devel information');
  }
}

/**
 * Implementation of hook_user_operations()
 */
function gigya_user_operations() {
  return array(
    'gigya_unlink' => array(
      'label' => 'Remove Gigya Linkages',
      'callback' => 'gigya_delete_account_bulk',
    ),
  );
}

/**
 * @param array $accounts
 *   Array of Drupal UIDs to be unlinked from Gigya
 *
 */
function gigya_delete_account_bulk($accounts) {
  if (is_array($accounts)) {
    foreach ($accounts as $account) {
      if ($account = user_load($account)) {
        $account->gigya->deleteAccount();
      }
    }
  }
}

/**
 *  Defines Gigya actions.
 */
function gigya_action_info() {
  $info = array();

  $info['gigya_shareui_node_action'] = array(
    'type' => 'node',
    'description' => t('Share node data via Gigya'),
    'configurable' => TRUE,
    'hooks' => array('nodeapi' => array('insert', 'update', 'delete', 'presave')),
  );
  $info['gigya_shareui_user_action'] = array(
    'type' => 'user',
    'description' => t('Share user data via Gigya'),
    'configurable' => TRUE,
    'hooks' => array('user' => array('insert', 'update', 'login', 'logout', 'delete')),
  );
  $info['gigya_shareui_comment_action'] = array(
    'type' => 'comment',
    'description' => t('Share comment data via Gigya'),
    'configurable' => TRUE,
    'hooks' => array('comment' => array('insert', 'update')),
  );
  $info['gigya_delete_account_action'] = array(
    'type' => 'user',
    'description' => t('Delete account from Gigya'),
    'configurable' => FALSE,
    'hooks' => array('user'),
  );
  return $info;
}

/**
 * Undocumented Function!
 *
 * @param $type
 *   Undocumented Parameter!
 * @param $object
 *   Undocumented Parameter!
 * @param $context
 *   Undocumented Parameter!
 */
function gigya_shareui_general_action($type, $object, $context) {

  module_load_include('inc', 'gigya');

  $share_params = array(
    'type' => $type,
    'context' => $context,
    'object' => $object,
    'shareui_params' => array(
      'userAction' => array(
        'title' => $context['shareui_title'],
        'description' => $context['shareui_description'],
        'link_back' => $context['shareui_linkback'],
        'template' => $context['shareui_template'],
        'user_message' => $context['shareui_user_message'],
        'action_links' => array(
          array(
            'title' => $context['shareui_action_link_title'],
            'href' => $context['shareui_action_link_href']
          ),
        ),
      ),
      'useHTML' => $context['shareui_useHTML'],
      'showMoreButton' => $context['shareui_show_more_button'],
      'showEmailButton' => $context['shareui_show_email_button'],
    ),
  );

  $token_types = gigya_action_tokens($type);
  $replacements = gigya_replacements($type, $object);
  array_walk_recursive($share_params['shareui_params']['userAction'], 'gigya_execute_replacement', array('replacements' => $replacements, 'token_types' => $token_types, 'object' => $object, 'type' => $type));

  $_SESSION['gigya_shareui'] = $share_params;
}

/**
 * Form builder the Share UI action settings form.
 *
 * @param $action_type
 *   The type of object the action is for. Available choices are node,
 *   comment or user.
 * @param $context
 *   Undocumented Parameter!
 *
 * @see gigya_shareui_general_action_submit()
 */
function gigya_shareui_general_action_form($action_type, $context) {
  // Set up form defaults.
  switch ($action_type) {
    case 'node':
      $default_vals = array(
        'shareui_title' => '!title',
        'shareui_user_message' => 'posted a Drupal site item',
        'shareui_linkback' => '!url',
        'shareui_description' => '!teaser',
        'shareui_template' => '{actor} just posted a node',
        'shareui_action_link_title' => variable_get('site_name', ''),
        'shareui_action_link_href' => url('<front>', array('absolute' => TRUE)),
      );
    break;
    case 'comment':
      $default_vals = array(
        'shareui_title' => '!subject',
        'shareui_user_message' => 'posted a comment',
        'shareui_linkback' => '!url',
        'shareui_description' => '!comment',
        'shareui_template' => '{actor} just posted a comment',
        'shareui_action_link_title' => variable_get('site_name', ''),
        'shareui_action_link_href' => url('<front>', array('absolute' => TRUE)),
      );
    break;
    case 'user':
      $default_vals = array(
        'shareui_title' => '!name',
        'shareui_user_message' => 'altered their profile',
        'shareui_linkback' => '!profile',
        'shareui_description' => '',
        'shareui_template' => '{actor} just altered their profile',
        'shareui_action_link_title' => variable_get('site_name', ''),
        'shareui_action_link_href' => url('<front>', array('absolute' => TRUE)),
      );
    break;
  }

  $context = array_merge($default_vals, $context);

  // Provide token information.
  $form['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['token_help']['token_description'] = array(
    '#value' => '<div>' . t('You may use the following replacement patterns for this action.') . '</div>',
  );
  $form['token_help']['simple_token_help'] = array(
    '#value' => gigya_replacements($action_type, NULL, TRUE),
  );

  if (module_exists('token')) {
    $form['token_help']['help'] = array(
      '#value' => theme('token_help', gigya_action_tokens($action_type)),
    );
  }
  else{
    $form['token_help']['help'] = array(
      '#value' => '<div>' . t('Install the Token module for more replacement pattern options.') . '</div>'
    );
  }

  // Share UI fields.
  $form['shareui_user_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Default User Message'),
    '#description' => t('Configure the default user message for this action.'),
    '#default_value' => isset($context['shareui_user_message']) ? $context['shareui_user_message'] : 'posted a Drupal site item',
    '#required' => TRUE,
  );
  $form['shareui_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title of shared content'),
    '#default_value' => isset($context['shareui_title']) ? $context['shareui_title'] : '!title',
    '#required' => TRUE,
  );
  $form['shareui_linkback'] = array(
    '#type' => 'textfield',
    '#title' => t('Title link'),
    '#description' => t('The url the title should link to.'),
    '#default_value' => isset($context['shareui_linkback']) ? $context['shareui_linkback'] : '!url',
    '#required' => TRUE,
  );
  $form['shareui_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description of shared content'),
    '#description' => t('Usually this will be the teaser of the node.'),
    '#default_value' => isset($context['shareui_description']) ? $context['shareui_description'] : '!teaser',
    '#required' => TRUE,
  );
  $form['shareui_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Action template'),
    '#description' => t('The user\'s action.'),
    '#default_value' => isset($context['shareui_template']) ? $context['shareui_template'] : '{actor} just posted a node',
    '#required' => TRUE,
  );
  $form['shareui_action_link_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Action link text'),
    '#description' => t('The text of the action link at the bottom of the newsfeed post.'),
    '#default_value' => isset($context['shareui_action_link_title']) ? $context['shareui_action_link_title'] : variable_get('site_name', ''),
    '#required' => FALSE,
  );
  $form['shareui_action_link_href'] = array(
    '#type' => 'textfield',
    '#title' => t('Action link URL'),
    '#description' => t('The url the action link should link to.'),
    '#default_value' => isset($context['shareui_action_link_href']) ? $context['shareui_action_link_href'] : url('<front>', array('absolute' => TRUE)),
    '#required' => FALSE,
  );
  $form['shareui_useFlash'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Flash widget instead of HTML'),
    '#default_value' => isset($context['shareui_useHTML']) ? !$context['shareui_useHTML'] : FALSE,
  );
  $form['shareui_show_more_button'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show 'more' button"),
    '#description' => t('Allows users to choose from an extended list of social networks.'),
    '#default_value' => isset($context['shareui_show_more_button']) ? $context['shareui_show_more_button'] : FALSE,
  );
  $form['shareui_show_email_button'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show email button'),
    '#default_value' => isset($context['shareui_show_email_button']) ? $context['shareui_show_email_button'] : FALSE,
    '#description' => t('Allows users to optionally share via email.'),
  );

  return $form;
}

/**
 * Form submission handler for gigya_shareui_general_action_form().
 *
 * @see gigya_shareui_general_action_form()
 */
function gigya_shareui_general_action_submit($form, $form_state) {
  return array(
    'shareui_template' => $form_state['values']['shareui_template'],
    'shareui_user_message' => $form_state['values']['shareui_user_message'],
    'shareui_title' => $form_state['values']['shareui_title'],
    'shareui_description' => $form_state['values']['shareui_description'],
    'shareui_linkback' => $form_state['values']['shareui_linkback'],
    'shareui_action_link_title' => $form_state['values']['shareui_action_link_title'],
    'shareui_action_link_href' => $form_state['values']['shareui_action_link_href'],
    'shareui_useHTML' => !$form_state['values']['shareui_useFlash'],
    'shareui_show_more_button' => $form_state['values']['shareui_show_more_button'],
    'shareui_show_email_button' => $form_state['values']['shareui_show_email_button'],
  );
}

/**
 * Action to remove a user's Gigya linkages
 *
 * @param $object
 *   Undocumented Parameter!
 * @param $context
 *   Undocumented Parameter!
 */
function gigya_delete_account_action($object, $context) {
  $user = user_load($object->uid);
  $user->gigya->deleteAccount();
}

/**
 * Defines action tokens.
 *
 * @param $object_type
 *   Undocumented Parameter!
 *
 * @return
 *   An array containing the types of action tokens to display.
 */
function gigya_action_tokens($object_type) {
  if ($object_type == 'nodeapi' || $object_type == 'node') {
    return array('node');
  }
  elseif ($object_type == 'comment') {
    return array('node', 'comment');
  }
  elseif ($object_type == 'user') {
    return array('user');
  }
}

/**
 * Defines basic Gigya token replacement patterns.
 *
 * @param $type
 *   Undocumented Parameter!
 * @param $object
 *   Undocumented Parameter!
 * @param $help
 *   Undocumented Parameter!
 */
function gigya_replacements($type, $object = NULL, $help = FALSE) {
  global $user;

  switch ($type) {
    case 'node':
    case 'nodeapi':
      if ($help) {
        return theme('table',
          array('Pattern', 'Value'),
          array(
            array(
              array(
              'data' => 'Basic replacement patterns',
              'colspan' => 2,
              'class' => 'region',
              ),
            ),
            array('!title', 'node title'),
            array('!url', 'node url'),
            array('!teaser', 'node teaser'),
            array('!user', 'Drupal user who performed the action'),
            array('{actor}', 'user\'s remote social network username, linked to their profile'),
          )
        );
      }
      else {
        return array(
          '!title' => $object->title,
          '!url' => url('node/' . $object->nid, array('absolute' => TRUE, 'alias' => TRUE)),
          '!user' => $user->name,
          '!teaser' => $object->teaser,
        );
      }
      break;
    case 'user':
      if ($help) {
        return theme('table',
          array('Pattern', 'Value'),
          array(
            array(
              array(
                'data' => 'Basic replacement patterns',
                'colspan' => 2,
                'class' => 'region',
              ),
            ),
            array('!name', 'name of user profile acted on'),
            array('!profile', 'profile url'),
            array('!user', 'user who performed the action'),
            array('{actor}', 'user\'s remote social network username, linked to their profile'),
          )
        );
      }
      else {
        return array(
          '!name' => $object->name,
          '!profile' => url('user/' . $object->uid, array('absolute' => TRUE, 'alias' => TRUE)),
          '!user' => $user->name,
        );
      }
      break;
    case 'comment':
      if ($help) {
        return theme('table',
          array('Pattern', 'Value'),
          array(
            array(
              array(
                'data' => 'Basic replacement patterns',
                'colspan' => 2,
                'class' => 'region',
              ),
            ),
            array('!author', 'comment author'),
            array('!subject', 'comment subject'),
            array('!comment', 'comment body'),
            array('!url', 'comment url'),
            array('!user', 'user who performed the action'),
            array('{actor}', 'user\'s remote social network username, linked to their profile'),
          )
        );
      }
      else {
        return array(
          '!author' => $object->author,
          '!subject' => $object->subject,
          '!comment' => $object->comment,
          '!url' => url('node/' . $object->nid, array('absolute' => TRUE, 'alias' => TRUE)),
          '!user' => $user->name,
          );
      }
      break;
  }
}

/**
 * Undocumented Function!
 *
 * @param $object
 *   Undocumented Parameter!
 * @param $context
 *   Undocumented Parameter!
 */
function gigya_shareui_node_action($object, $context) {
  gigya_shareui_general_action('node', $object, $context);
}

/**
 * Form builder for the node action form.
 *
 * @param $context
 *   Undocumented Parameter!
 *
 * @see gigya_shareui_node_action_submit()
 */
function gigya_shareui_node_action_form($context) {
  return gigya_shareui_general_action_form('node', $context);
}

/**
 * Form submission handler for gigya_shareui_node_action_form().
 *
 * @see gigya_shareui_node_action_form()
 */
function gigya_shareui_node_action_submit($form, $form_state) {
  return gigya_shareui_general_action_submit($form, $form_state);
}

/**
 * Undocumented Function!
 *
 * @param $object
 *   Undocumented Parameter!
 * @param $context
 *   Undocumented Parameter!
 */
function gigya_shareui_user_action($object, $context) {
  gigya_shareui_general_action('user', $object, $context);
}

/**
 * Form builder for the user action form.
 *
 * @param $context
 *   Undocumented Parameter!
 *
 * @see gigya_shareui_user_action_submit()
 */
function gigya_shareui_user_action_form($context) {
  return gigya_shareui_general_action_form('user', $context);
}

/**
 * Form submission handler for gigya_shareui_user_action_form().
 *
 * @see gigya_shareui_user_action_form()
 */
function gigya_shareui_user_action_submit($form, $form_state) {
  return gigya_shareui_general_action_submit($form, $form_state);
}

/**
 * Undocumented Function!
 *
 * @param $object
 *   Undocumented Parameter!
 * @param $context
 *   Undocumented Parameter!
 */
function gigya_shareui_comment_action($object, $context) {
  gigya_shareui_general_action('comment', $object, $context);
}

/**
 * Form builder for the comment action form.
 *
 * @param $context
 *   Undocumented Parameter!
 *
 * @see gigya_shareui_comment_action_submit()
 */
function gigya_shareui_comment_action_form($context) {
  return gigya_shareui_general_action_form('comment', $context);
}

/**
 * Form submission handler for gigya_shareui_comment_action_form().
 *
 * @see gigya_shareui_comment_action_form()
 */
function gigya_shareui_comment_action_submit($form, $form_state) {
  return gigya_shareui_general_action_submit($form, $form_state);
}

/**
 * Implementation of hook_init().
 */
function gigya_init() {
  global $base_path, $base_url, $user;
  module_load_include('inc', 'gigya');
  $path = drupal_get_path('module', 'gigya');

  // Get the chosen networks; defaults to all if none selected.
  $networks = variable_get('gigya_selected_networks', gigya_get_networks());
  if (!$networks) {
    drupal_set_message(t('The Gigya Socialize module is enabled but no Social Networks have been enabled. !configure', array('!configure' => l('Please configure it now', 'admin/settings/gigya'))));
    return;
  }

  // We dont care about the friendly titles. When the checkboxes in the
  // system settings area are saved, all the keys are saved using a 0 for
  // the unselected values. If we swap the keys with values all the
  // unselected ones except for the last get automatically unset.
  $networks = array_flip($networks);
  // Unset the last unselected network.
  unset($networks[0]);
  $gigya_js_settings = array(
    'conf' => array(
      'APIKey' => variable_get('gigya_APIKey', FALSE),
      'enabledProviders' => implode(', ', array_values($networks)),
    ),
  );

  // Add the basic JS needed for the module.
  $uri_prefix = !empty($_SERVER['HTTPS']) ? 'https://cdns' : 'http://cdn';
  drupal_set_html_head('<script src="' . check_url(url($uri_prefix . '.gigya.com/JS/gigya.js?services=socialize')) . '" type="text/javascript"></script>');
  drupal_add_js(array('gigya' => $gigya_js_settings), 'setting');
  drupal_add_js($path . '/gigya.js');
  drupal_add_js($path . '/gigya.behaviors.js');


  if ($user->uid) {
    // Attach the Gigya object to the user object.
    GigyaUser::load($user);
    // Add the notify login JS if it's needed.
    if (empty($_SESSION['gigya_suppress_notifylogin_js'])) {
      gigya_set_notify_login_params($user->uid);
    }
  }

  // Spawn a shareUI window if there's one queued up.
  if ($user->uid > 0 && isset($_SESSION['gigya_shareui'])) {
    gigya_shareui_js($_SESSION['gigya_shareui']);
    unset($_SESSION['gigya_shareui']);
  }
}

/**
 * Implementation of hook_perm().
 */
function gigya_perm() {
  return array('administer gigya');
}

/**
 * Implementation of hook_user().
 *
 * The main API for accessing, storing, and viewing the gigya bios.
 */
function gigya_user($op, &$edit, &$account, $category = NULL) {
  global $base_url, $user;
  module_load_include('inc', 'gigya');

  switch ($op) {
    case 'load':
      GigyaUser::load($account);
      break;
    case 'logout':
      if (isset($user->gigya)) {
        $user->gigya->logout();
      }
      break;
    case 'insert':
      // Only link accounts if the user running this code has evidence of a
      // Gigya login in the URL.
      if ($_gigya_user = GigyaUser::userFromUrl()) {
        $bio = $_gigya_user->getUserInfo();
        $_gigya_user->notifyRegistration($account->uid);

        // Removing this for now until we can implement it better.
        //$_gigya_user->mapExtendedProfileFields($edit);

        // We can suppress the notify login JS because
        // the user is clearly already logged into Gigya.
        $_SESSION['gigya_suppress_notifylogin_js'] = TRUE;
      }
      break;
    case 'delete':
      $account->gigya->deleteAccount();
      break;
    case 'categories':
      return array(
        array(
          'name' => 'gigya',
          'title' => t('Social Networks'),
          'weight' => 10,
          'access callback' => 'user_edit_access',
          'access arguments' => array(1),
        ),
      );
    case 'view':
      $content = '';
      $_gigya_user = new GigyaUser($account->uid);
      $bio = $_gigya_user->getUserInfo();
      if (!empty($bio['identities'])) {
        foreach ($bio['identities']->identity as $network_obj) {
          $network = get_object_vars($network_obj);
          $networkName = gigya_get_network_display_name($network['provider']);
          $account->content['gigya'][$network['provider']] = array(
            '#type' => 'user_profile_category',
            '#title' => t('!social profile', array('!social' => $networkName)),
            '#weight' => 0,
          );
          $account->content['gigya'][$network['provider']]['bio'] = array(
            '#type' => 'user_profile_item',
            '#value' => theme('gigya_user_profile', $network),
          );
        }
      }
      else {
        if ((empty($bio['isConnected']) || ($bio['isConnected'] == 'FALSE') || !($bio['isConnected'])) && $user->uid == $account->uid)  {
          $account->content['gigya']['no_networks'] = array(
            '#type' => 'user_profile_category',
            '#title' => t('Social Networks'),
          );

          $account->content['gigya']['no_networks']['no_network'] = array(
            '#type' => 'user_profile_item',
            '#value' => t('You are currently not connected to any social network. !connect', array('!connect' => l(t('Click here to connect to a social network'), 'user/' . $account->uid . '/edit/gigya'))),
            );
        }
      }
      break;
  }
}

/**
 * Undocumented Function!
 *
 * @param $parent_key
 *   Undocumented Parameter!
 * @param $current_object
 *   Undocumented Parameter!
 * @param $depth
 *   Undocumented Parameter!
 *
 * @return $output
 *   Undocumented Return!
 */
function gigya_print_object($parent_key = '', $current_object, $depth = 0) {
  if (!$current_object) {
    return $parent_key . '->N/A';
  }

  $output = '';
  $spaces = str_repeat('&nbsp;', (2 * $depth) + 1);
  foreach ($current_object as $key => $value) {
    if (is_array($value)) {
      $output .= $spaces . '(' . $depth . '):' . $parent_key .'->' . $key . ': <br/>';
      $output .= gigya_print_object($key, $value, $depth + 1);
    }
    else {
      if (is_string($value) || is_numeric($value) || is_bool($value)) {
        $output .= $spaces . '(' . $depth . '):' . $parent_key . '->' . $key . '=' . $value . '<br/>';
      }
    }
  }
  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function gigya_form_alter(&$form, $form_state, $form_id) {
  global $base_url, $user;

  if (variable_get('gigya_login_form_position', 0) == 0) {
    $form_key = '#prefix';
  }
  else {
    $form_key = '#suffix';
  }

  $hide_title = variable_get('gigya_login_hide_title', FALSE);

  /*
   * Modify the user registration form.
   */
  if ($form_id == 'user_register') {
    module_load_include('inc', 'gigya');
    module_load_include('.inc', 'user', 'user.pages');

    // If they haven't logged into Gigya and they're not already logged in
    // simply add the Gigya login block.
    if (!($_gigya_user = GigyaUser::userFromUrl()) && !$user->uid) {
      $form[$form_key] .= theme('gigya_login_block', $form_id, $hide_title);
    }
    // If they HAVE logged into Gigya then populate some of the data and
    // hide the password field.
    elseif ($_gigya_user = GigyaUser::userFromUrl()) {
      $bio = $_gigya_user->getUserInfo();

      // Sometimes the account info is inside an 'account' array,
      // sometimes it's not.  Truthfully, I don't always know why it's one
      // way or the other. It seems to have to do with what fields
      // are on the page.
      if (isset($form['account'])) {
        $form_account = &$form['account'];
      }
      else{
        $form_account = &$form;
      }

      // Map the fields from the social network.
      array_walk($form, 'gigya_apply_profile_mapping');

      // Set the password and hide the password field.
      $form_account['pass']['#type'] = 'hidden';
      $form_account['pass']['#value'] = user_password();

      // If Login Toboggan created a new confirmation mail field,
      // prepopulate it as well.
      if (isset($form_account['conf_mail'])) {
        $form_account['conf_mail']['#default_value'] = $form_account['mail']['#default_value'];
      }
    }
    return $form;
  }

  /*
   * Modify the user login page.
   */
  if ($form_id == 'user_login') {
    module_load_include('inc', 'gigya');
    $form[$form_key] .= theme('gigya_login_block', $form_id, $hide_title);
  }

  /*
   * Modify the user login block.
   */
  if ($form_id == 'user_login_block') {
    module_load_include('inc', 'gigya');

    if (variable_get('gigya_login_surpress_login', FALSE)) {
      unset($form['name']);
      unset($form['pass']);
      unset($form['submit']);
      unset($form['links']);
      // If it's the only item on the page we definitely want
      // the title hidden to avoid duplicates.
      $hide_title = TRUE;
    }

    $form[$form_key] .= theme('gigya_login_block', $form_id, $hide_title);

    return $form;
  }

  /*
   * Modify the Gigya administration form.
   */
  if ($form_id == 'gigya_admin_form') {
    variable_get('need_validation_msg', FALSE);
    unset($form['buttons']['reset']);
  }
}

/**
 * Loads basic Gigya parameters.
 *
 * @return
 *   An array of parameters.
 */
function gigya_load_params() {
  $params = array();
  $params['apiKey'] = variable_get('gigya_APIKey', FALSE);
  $params['nonce'] = time() . rand();
  $params['timestamp'] = time();
  return $params;
}

/**
 * Undocumented Function!
 *
 * @param $uid
 *   Undocumented Parameter!
 */
function gigya_set_notify_login_params($uid) {
  global $base_path;
  module_load_include('inc', 'gigya');

  $timestamp = gmdate('Y-m-d H:i:s');

  $signature = _gigya_verify_signature($timestamp, $uid, variable_get('gigya_SecretKey', FALSE));
  $gigya_notify_login = array(
    'notifyLoginParams' => array(
    'siteUID' => $uid,
    'timestamp' => $timestamp,
    'signature' => $signature,
    'context' => array('method' => 'notifyLogin')
  ));

  drupal_add_js(array('gigya' => $gigya_notify_login), 'setting');
}

/**
 * Implementation of hook_theme().
 */
function gigya_theme() {
  return array(
    'gigya_connect_display' => array(),
    'gigya_friends' => array(
      'arguments' => array('friends' => NULL),
    ),
    'gigya_link_accounts' => array(
      'arguments' => array('form' => NULL),
      'template' => 'gigya-link-accounts',
    ),
    'gigya_register' => array(
      'arguments' => array(
        'bio' => NULL,
        'registration_form' => NULL,
        'link_accounts_form' => NULL,
      ),
      'template' => 'gigya-register',
    ),
    'gigya_login_block' => array(
      'arguments' => array(
        'form_id' => NULL,
        'suppress_title' => FALSE,
      ),
      'template' => 'gigya-login-block',
    ),
    'gigya_user_profile' => array(
      'arguments' => array('bio' => NULL),
      'template' => 'gigya-user-profile',
    ),
  );
}

/**
 * Undocumented Function!
 *
 * @return
 *   Undocumented Return!
 *
 * @ingroup themeable
 */
function theme_gigya_connect_display() {
  global $user;

  if ($user->uid) {
    return gigya_connectui_js();
  }
}

/**
 * Undocumented Function!
 *
 * @param $friends
 *   Undocumented Parameter!
 *
 * @ingroup themeable
 */
function theme_gigya_friends($friends) {
  global $user, $base_url;
  $content = '';

  $content .= '<div id="gigya_friends">';
  $content .= '<table id="gigya_friends_table" style="border:0" cellpadding="0" cellspacing="0">';
  $content .= '<tr class="gigya table">';
  $friend_count = count($friends);

  $rows = $friend_count / 5;
  $tail = $friend_count % 5;
  $rowcount = 1;
  $colcount = 0;
  foreach ($friends as $friend) {
    $site_friend = $friend['identities']->identity;
    $colcount++;
    if (isset($site_friend->thumbnailURL)) {
      $friend_photo = $site_friend->thumbnailURL;
    }
    elseif (isset($site_friend->photoURL)) {
      $friend_photo = $site_friend->photoURL;
    }
    else {
      $friend_photo = $base_url . '/' . drupal_get_path('module', 'gigya') . '/silhouette.gif';
    }
      $friend_link =  l($site_friend->nickname, 'user/' . $site_friend->UID);
      $content .= '<td width="20%" class="friend_bio"><img width="50" height="50" src="'. $friend_photo .'" /><br /><span class="friend_nickname">'. $friend_link .'</span></td>';
    if (($colcount * $rowcount) == $friend_count) {
      $remainder = 5 - $colcount;
      $content .= '<td width="' . (20 * $remainder) . '% colspan="' . $remainder . '">&nbsp;</td></tr>';
    }
    elseif ($colcount == 5) {
      $content .= '</tr><tr class="gigya table">';
      $rowcount++;
      $colcount = 0;
    }
  }
  if ($colcount == 0 && $rowcount == 1) {
    $content .= '<td><span class="gigya no-friends">' . t('You currently have no social network friends connected to this site. !connect', array('!connect' => l('Have you connected to a social network?', 'user/' . $user->uid .'/edit/gigya'))) . '</span></td></tr>';
  }
  $content .= '</table>';
  $content .= '</div>';

  return $content;
}

/**
 * Process variables for gigya-link-accounts.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $form: Gigya link accounts form.
 *
 * @see gigya-link-accounts.tpl.php
 **/
function template_preprocess_gigya_link_accounts(&$variables) {
  if (variable_get('gigya_enable_linking', TRUE)) {
    $variables['form_title'] = t('Or log in to link your existing account to this social network');
    $variables['link_form'] = drupal_render($variables['form']);
  }
}

/**
 * Process variables for gigya-register.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $bio: Gigya user object.
 * - $registration_form: Drupal user registration form.
 * - $link_accounts_form: Gigya link accounts form.
 *
 * @see gigya-register-form.tpl.php
 **/
function template_preprocess_gigya_register(&$variables) {
  $variables['title'] = t('Complete your registration');
  $variables['message'] = t('You have been authenticated via %provider. Please complete your registration below.', array('%provider' => $variables['bio']['loginProvider']));
}

/**
 * Process variables for gigya-login-block.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $form_id
 * - $suppress_title
 *
 * @see gigya-login-block.tpl.php
 **/
function template_preprocess_gigya_login_block(&$variables) {
  $variables['login_div'] = gigya_loginui_js();
  if (!$variables['suppress_title']) {
    $variables['title'] = t('Login using social networks');
  }
}

/**
 * Process variables for gigya_user-profile.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $bio
 *
 * @see gigya-user-profile.tpl.php
 **/
function template_preprocess_gigya_user_profile(&$variables) {
  global $base_url;
  $bio = $variables['bio'];

  // Figure out what to print for the picture.
  if ($bio['thumbnailURL']) {
    //$variables['photo'] = '<img id="photo" src="' . $bio['thumbnailURL'] . '" />';
    $variables['photo'] = theme('image', $bio['thumbnailURL'], 'Photo of' . $bio['nickname'], 'Photo of' . $bio['nickname'], array('id' => 'photo'), FALSE);
  }
  elseif ($bio['photoURL']) {
    $variables['photo'] = theme('image', $bio['photoURL'], 'Photo of' . $bio['nickname'], 'Photo of' . $bio['nickname'], array('id' => 'photo'), FALSE);
  }
  // If nothing else, then use the default avatar image.
  else {
    //$variables['photo'] =  '<img id="photo" src="' . $base_url . '/' . drupal_get_path('module', 'gigya') . '/silhouette.gif' . '" />';
    $variables['photo'] = theme('image', drupal_get_path('module', 'gigya') . '/silhouette.gif', 'Photo of' . $bio['nickname'], 'Photo of' . $bio['nickname'], array('id' => 'photo'), FALSE);
  }

  // Print out the user nickname.
  $variables['name'] = $bio['profileURL'] ? l($bio['nickname'], $bio['profileURL']) : $bio['nickname'];

}

/**
 * Modifies the login block title if Gigya is suppressing Drupal's core login.
 */
function gigya_preprocess_block(&$vars) {
  if ($vars['block']->subject == t('User login')) {
    if (variable_get('gigya_login_surpress_login', FALSE)) {
      $vars['block']->subject = 'Login using social networks';
    }
  }
}

/**
 * Form builder for the account linking form.
 *
 * @see gigya_link_accounts_form_submit()
 */
function gigya_link_accounts_form() {
  $form = array(
    '#theme' => 'gigya_link_accounts'
  );

  $form['link_accounts']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 60,
    '#maxlength' => USERNAME_MAX_LENGTH,
    '#required' => TRUE,
  );

  $form['link_accounts']['name']['#description'] = t('Enter your @site username.', array('@site' => variable_get('site_name', 'Drupal')));

  $form['link_accounts']['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter the password that accompanies your username.'),
    '#required' => TRUE,
  );

  $form['#validate'] = user_login_default_validators();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
    '#weight' => 2,
  );

  return $form;
}

/**
 * Form submission handler for gigya_link_accounts_form().
 *
 * @see gigya_link_accounts_form()
 */
function gigya_link_accounts_form_submit(&$form, &$form_state) {
  global $user;

  if (!empty($user->uid) && $_gigya_user = GigyaUser::userFromUrl()) {
    $_gigya_user->setUID($user->uid);

    /*
     *  Don't suppress notify login for now.
     *  Hopefully we'll get a response to this question:
     *  http://forum.gigya.com/forum/Default.aspx?g=posts&t=775
     */
    //$_SESSION['link_accounts'] = TRUE;
    //$_SESSION['gigya_suppress_notifylogin_js'] = TRUE;

  }
  return;
}



/**
 * Undocumented Class!
 */
class GigyaUser{

  /**
   * Undocumented Variable!
   *
   * @var
   */
  public $uid;

  /**
   * Undocumented Variable!
   *
   * @var
   */
  private $userinfo;

  /**
   * Constructs a GigyaUser object.
   *
   * @param $gigya_uid
   *   Undocumnted Parameter!
   */
  public function __construct($gigya_uid) {
    $this->uid = $gigya_uid;
  }

  /**
   * Undocumented Function!
   *
   * @param $refresh
   *   Undocumented Parameter!
   */
  public function getUserInfo($refresh = FALSE) {
    //if (!empty($this->userinfo) && !$refresh) return $this->userinfo;
    return gigya_get_user_info($this->uid);
  }

  /**
   * Undocumented Function!
   *
   * @param $content
   *   Undocumented Parameter!
   */
  public function publishUserAction($content) {
    if (!$this->hasCapability('Actions')) return FALSE;
    return gigya_publish_user_action($this->uid, $content);
  }

  /**
   * Undocumented Function!
   *
   * @param $account
   *   Undocumented Parameter!
   */
  public static function load(&$account) {
    $account->gigya = new GigyaUser($account->uid);
  }

  /**
   * Redirects to a logout URL where JavaScript will be added to the page.
   */
  public function logout() {
    /*
     * I don't like doing this on a separate page, it's kinda fragile,
     * but it's the best I can figure out for now since the session gets
     * destroyed by the user_logout function.
     */
    global $user;
    $_REQUEST['destination'] = urlencode('socialize-logout?destination='. $_REQUEST['destination']);
  }

  /**
   * Undocumented Function!
   */
  public function getFriends() {
    return gigya_get_friends_info($this->uid);
  }

  /**
   * Undocumented Function!
   */
  public function getCapabilities() {
    if ($bio = $this->getUserInfo()) {
      $capabilities = split(', ', $bio['capabilities']);
      array_walk($capabilities, '_gigya_trim_value');
      return $capabilities;
    }
    else {
      return array();
    }
  }

  /**
   * Undocumented Function!
   *
   * @param $capability
   *   Undocumented Parameter!
   */
  public function hasCapability($capability) {
    $capabilities = $this->getCapabilities();
    return array_search($capability, $capabilities);
  }

  /**
   * Maps extended profile fields that weren't on the registration form.
   *
   * @param $edit
   *   Undocumented Parameter!
   */
  public function mapExtendedProfileFields($edit) {
    $bio = $this->getUserInfo();

    if (module_exists('profile')) {
      $temp_edit = array();
      if ($profile_categories = profile_categories()) {

        foreach ($profile_categories as $category) {
          $result = _profile_get_fields($category['name']);
          while ($field = db_fetch_object($result)) {
            // Only attempt to set this variable if we've mapped it and
            // it isn't already set elsewhere.
            if (variable_get('gigya_profile_' . $field->name, '') != '0' && !isset($edit[$field->name])) {
              $bio_assoc = variable_get('gigya_profile_' . $field->name, '');
              $temp_edit[$field->name] = $bio[$bio_assoc];
            }
          }
          /*
           * This could potentially cause conflicts with other modules not
           * expecting that this will be called. Disable mapping of
           * extended profile fields if this causes a problem. This could
           * probably be replaced by profile_save_profile but I haven't
           * fully investigated it.
           */
          user_save($account, $temp_edit, $category['name']);
        }
      }
    }
  }

  /**
   * Undocumented Function!
   *
   * @param $uid
   *   Undocumented Parameter!
   */
  public function setUID($uid) {
    return gigya_set_uid($this->uid, $uid);
  }


  /**
   * Informs Gigya that this user has completed site registration
   */
  public function notifyRegistration($uid) {
    return gigya_notify_registration($this->uid, $uid);
  }

  /**
   * Undocumented Function!
   */
  public function deleteAccount() {
    gigya_delete_account($this->uid);
    return TRUE;
  }

  /**
   * Undocumented Function!
   */
  public static function userFromUrl() {
    if (!empty($_GET['signature']) && !empty($_GET['timestamp']) && !empty($_GET['UID'])) {
      // First, verify signature.
      $localkey = _gigya_verify_signature($_GET['timestamp'], $_GET['UID'], variable_get('gigya_SecretKey', FALSE));
      if ($localkey != $_GET['signature']) {
        drupal_set_message(t('Unable to authenticate. Gigya signature does not match.'), 'error');
          if ($user->uid == 1) {
            drupal_set_message(t('Signature is %gigya, Site sig is %site.', array('%gigya' => $form_values['signature'], '%site' => $localkey)), 'error');
          }
          return FALSE;
      }
      else{
        return new GigyaUser($_GET['UID']);
      }
    }
    else{
      return FALSE;
    }
  }
}

/*
 * Example of a hook_gigya_shareui_alter function.
 *
 * Please do not edit this here.  Instead you should create your own
 * hook_gigya_shareui_alter() function in your own module to add a media item
 * or change any shareUI parameters.
 *
 * @code
 * function hook_gigya_shareui_alter(&$object) {
 * $object['user_action_params']['media_item'] = array(
 *    'type' => 'flash',
 *    'src' => 'http://www.youtube.com/watch?v=fzzjgBAaWZw',
 *    'previewImageURL' => 'http://motherjones.com/files/legacy/mojoblog/funny-cats-a10.jpg'
 *  );
 * }
 * @endcode
 *
 */

/**
 * Attaches JavaScript object that will launch the shareUI.
 *
 * @param object $share
 *   Undocumented Parameter!
 */
function gigya_shareui_js($share) {
  static $index = 0;

  // Allow modules to alter the object before adding the JS to the page.
  drupal_alter('gigya_shareui', $share);

  drupal_add_js(array('gigya' => array('shareUIParams' => array($index => $share['shareui_params']))), 'setting');

  $index++;
}

/**
 * Gigya JavaScript settings for loginUI.
 *
 * Loads up the needed capabilities and variables for loginUI parameters.
 *
 * @return
 *   Undocumented Return!
 */
function gigya_loginui_js() {
  static $index = 0;

  $login_ui_config = variable_get('gigya_login_advanced_raw', '');
  if(empty($login_ui_config)){
    $login_ui_config = '<config><body><captions background-color="' . variable_get('gigya_login_uiconfig_color_caption_background', GIGYA_DEFAULT_LOGINUI_COLOR_CAPTION_BACKGROUND) . '" color="'. variable_get('gigya_login_uiconfig_color_caption_text', GIGYA_DEFAULT_LOGINUI_COLOR_CAPTION_TEXT) . '"></captions><texts color="'. variable_get('gigya_login_uiconfig_color_text', GIGYA_DEFAULT_LOGINUI_COLOR_TEXT) . '"><links color="' . variable_get('gigya_login_uiconfig_color_link', GIGYA_DEFAULT_LOGINUI_COLOR_LINK) . '"></links></texts><controls><snbuttons buttonsize="' . variable_get('gigya_login_uiconfig_iconsize', GIGYA_DEFAULT_ICONSIZE) . '" color="'. variable_get('gigya_login_uiconfig_color_button_text', GIGYA_DEFAULT_LOGINUI_COLOR_BUTTON_TEXT) . '"></snbuttons><scrollingarrow color="' . variable_get('gigya_login_uiconfig_color_navigation_arrow', GIGYA_DEFAULT_LOGINUI_COLOR_NAVIGATION_ARROW) . '"></scrollingarrow></controls><background background-color="'. (variable_get('gigya_login_uiconfig_color_background_transparent', GIGYA_DEFAULT_LOGINUI_COLOR_BACKGROUND_TRANSPARENT) ? 'Transparent' : variable_get('gigya_login_uiconfig_color_background', GIGYA_DEFAULT_LOGINUI_COLOR_BACKGROUND)) . '" frame-color="' . variable_get('gigya_login_uiconfig_color_frame', GIGYA_DEFAULT_LOGINUI_COLOR_FRAME) . '"></background></body></config>';
  }

  $gigya_login_params = array(
    'headerText' => variable_get('gigya_login_uiconfig_title', ''),
    'width' => (int) variable_get('gigya_login_uiconfig_width', GIGYA_DEFAULT_LOGINUI_WIDTH),
    'height' => (int) variable_get('gigya_login_uiconfig_height', GIGYA_DEFAULT_LOGINUI_HEIGHT),
    'containerID' => variable_get('gigya_login_uiconfig_containerID', GIGYA_DEFAULT_LOGINUI_CONTAINERID) .'-'. $index,
    'showTermsLink' => variable_get('gigya_login_uiconfig_terms', TRUE),
    'UIConfig' => $login_ui_config,
    'requiredCapabilities' => implode(',', array_filter(variable_get('gigya_requiredCapabilities', array('login', 'friends')))),
    'useHTML' => variable_get('gigya_login_uiconfig_useHTML', GIGYA_DEFAULT_LOGINUI_USEHTML),
    'pendingRegistration' => TRUE
  );
  if (variable_get('gigya_login_advanced_custombuttons', '')) {
    $gigya_login_params['SNButtonsResourceURL'] = variable_get('gigya_login_advanced_custombuttons', '');
  }

  // Allow modules to alter the object before adding the JS to the page.
  drupal_alter('gigya_loginui', $gigya_login_params);

  drupal_add_js(array('gigya' => array('loginUIParams' => array($index => $gigya_login_params))), 'setting');
  drupal_add_js(array('gigya' => array('loginDestination' => url('socialize-login', array('query' => array('destination' => $_REQUEST['destination']), 'absolute' => TRUE)))), 'setting');

  $index++;

  return '<div id="' . $gigya_login_params['containerID'] . '"></div>';
}


/**
 * Gigya JavaScript settings for connectUI.
 *
 * Loads up the needed capabilities and variables for connectUI parameters.
 *
 * @return
 *   Undocumented Return!
 */
function gigya_connectui_js() {
  static $index = 0;
  $connect_ui_config = variable_get('gigya_connect_uiconfig_raw', '');
  if(empty($connect_ui_config)){
    $connect_ui_config = '<config><body><captions background-color="' . variable_get('gigya_connect_uiconfig_color_caption_background', GIGYA_DEFAULT_CONNECTUI_COLOR_CAPTION_BACKGROUND) . '" color="' . variable_get('gigya_connect_uiconfig_color_caption_text', GIGYA_DEFAULT_CONNECTUI_COLOR_CAPTION_TEXT) .'"></captions><texts color="' . variable_get('gigya_connect_uiconfig_color_text', GIGYA_DEFAULT_CONNECTUI_COLOR_TEXT) .'"><links color="' . variable_get('gigya_connect_uiconfig_color_link', GIGYA_DEFAULT_CONNECTUI_COLOR_LINK) .'"></links></texts><controls><snbuttons buttonsize="' . variable_get('gigya_connect_uiconfig_iconsize', GIGYA_DEFAULT_ICONSIZE) . '" color="'. variable_get('gigya_connect_uiconfig_color_button_text', GIGYA_DEFAULT_CONNECTUI_COLOR_BUTTON_TEXT) . '"></snbuttons><scrollingarrow color="' . variable_get('gigya_connect_uiconfig_color_navigation_arrow', GIGYA_DEFAULT_CONNECTUI_COLOR_NAVIGATION_ARROW) .'"></scrollingarrow></controls><background background-color="' . (variable_get('gigya_connect_uiconfig_color_background_transparent', GIGYA_DEFAULT_CONNECTUI_COLOR_BACKGROUND_TRANSPARENT) ? 'Transparent' : variable_get('gigya_connect_uiconfig_color_background', GIGYA_DEFAULT_CONNECTUI_COLOR_BACKGROUND)) . '" frame-color="'. variable_get('gigya_connect_uiconfig_color_frame', GIGYA_DEFAULT_CONNECTUI_COLOR_FRAME) . '"></background></body></config>';
  }

  $gigya_connect_params = array(
    'headerText' => variable_get('gigya_connect_uiconfig_captionText', GIGYA_DEFAULT_CONNECTUI_CAPTIONTEXT),
    'width' => (int) variable_get('gigya_connect_uiconfig_width', GIGYA_DEFAULT_CONNECTUI_WIDTH),
    'height' => (int) variable_get('gigya_connect_uiconfig_height', GIGYA_DEFAULT_CONNECTUI_HEIGHT),
    'containerID' => variable_get('gigya_connect_uiconfig_containerID', GIGYA_DEFAULT_CONNECTUI_CONTAINERID) . '-' . $index,
    'showTermsLink' => variable_get('gigya_connect_uiconfig_terms', TRUE),
    'UIConfig' => $connect_ui_config,
    'requiredCapabilities' => implode(',', array_filter(variable_get('gigya_requiredCapabilities', array('login', 'friends')))),
    'useHTML' => variable_get('gigya_connect_uiconfig_useHTML', GIGYA_DEFAULT_CONNECTUI_USEHTML)
  );

  // Allow modules to alter the object before adding the JS to the page.
  drupal_alter('gigya_connectui', $gigya_connect_params);

  drupal_add_js(array('gigya' => array('connectUIParams' => array($index => $gigya_connect_params))), 'setting');

  $index++;
  return '<div id="' . $gigya_connect_params['containerID'] . '"></div>';
}


/**
 * Implementation of hook_token_values()
 */
function gigya_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'user' || $type == 'gigya') {
    module_load_include('inc', 'gigya');
    $gigya_fields = _gigya_get_profile_fields();
    $tokens = array();

    // "gigya" is a special type that really only this module should use.
    if($type == 'gigya'){
      if(!($gigya_user = GigyaUser::userFromUrl())){
        return $tokens;
      }
    }
    else {
      $gigya_user = $object->gigya;

      //just in case the gigya object didn't get attached to the user object
      if(!is_object($gigya_user)){
        $gigya_user = new GigyaUser($object->uid);
      }
    }
    $gigya_user_info = $gigya_user->getUserInfo();

    foreach($gigya_fields as $gigya_field_key => $gigya_field_value){
      $tokens['gigya-'. $gigya_field_key] = $gigya_user_info[$gigya_field_key];
    }

    return $tokens;
  }
}

/**
 * Implementation of hook_token_list().
 */
function gigya_token_list($type = 'all') {
  if ($type == 'all' || $type == 'user' || $type == 'gigya') {
    module_load_include('inc', 'gigya');
    $gigya_fields = _gigya_get_profile_fields();
    $tokens = array();

    foreach($gigya_fields as $gigya_field_key => $gigya_field_value){
      $tokens['gigya-' . $gigya_field_key] = $gigya_field_value;
    }

    if($type == 'gigya') return array('gigya' => $tokens);
    return array('user' => $tokens);
  }
}
